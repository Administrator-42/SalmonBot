# -*- coding: utf-8 -*-

# Ïó∞Ïñ¥Î¥á - SalmonBot
#Ìä∏Ìéô #ÏôîÎã§Í∞ê„Öã
#Îã§Ïø§ #Ìä∏Î°§Îü¨
#ÏïåÌåå #ÏßÄÎãàÏñ¥Ïä§
#ÏΩîÏù∏ #500Ïõê
#ÏàúÌïò #Í≤úÎßåÌï®

import discord
from discord.ext import commands, tasks
from exts.utils.salmon import Salmon
import asyncio
import platform
import json
import os
import paramiko
import datetime
import logging
import logging.handlers
import pymysql
import sys
import traceback
import itertools
from iftext import pulse
from exts.utils import checks, errors, emojictrl, msglogger, permutil

# Local Data Load
with open('./data/config.json', encoding='utf-8') as config_file:
    config = json.load(config_file)
with open('./data/version.json', encoding='utf-8') as version_file:
    version = json.load(version_file)
with open('./data/color.json', encoding='utf-8') as color_file:
    color = json.load(color_file)
with open('./data/emojis.json', encoding='utf-8') as emojis_file:
    emojis = json.load(emojis_file)

# Make Dir
reqdirs = ['./logs', './logs/salmon', './logs/error', './logs/ping']
for dit in reqdirs:
    if not os.path.isdir(dit):
        os.makedirs(dit)

logger = logging.getLogger('salmonbot')
logger.setLevel(logging.DEBUG)
log_formatter = logging.Formatter('%(asctime)s - %(levelname)s - %(message)s')
log_streamh = logging.StreamHandler()
log_streamh.setFormatter(log_formatter)
logger.addHandler(log_streamh)
log_fileh = logging.handlers.RotatingFileHandler('./logs/salmon/salmon.log', maxBytes=config['maxlogbytes'], backupCount=10)
log_fileh.setFormatter(log_formatter)
logger.addHandler(log_fileh)

pinglogger = logging.getLogger('ping')
pinglogger.setLevel(logging.INFO)
ping_formatter = logging.Formatter('%(asctime)s - %(levelname)s - %(message)s')
ping_fileh = logging.handlers.RotatingFileHandler('./logs/ping/ping.log', maxBytes=config['maxlogbytes'], backupCount=10)
ping_fileh.setFormatter(ping_formatter)
pinglogger.addHandler(ping_fileh)

errlogger = logging.getLogger('error')
errlogger.setLevel(logging.DEBUG)
err_formatter = logging.Formatter('%(asctime)s - %(levelname)s - %(message)s')
err_streamh = logging.StreamHandler()
err_streamh.setFormatter(err_formatter)
errlogger.addHandler(err_streamh)
err_fileh = logging.handlers.RotatingFileHandler('./logs/error/error.log', maxBytes=config['maxlogbytes'], backupCount=10)
err_fileh.setFormatter(err_formatter)
errlogger.addHandler(err_fileh)

logger.info('========== START ==========')

langs = {}
for langfile in list(filter(lambda x: os.path.splitext(x)[1] == '.json', os.listdir('./langs'))):
    with open(f'./langs/{langfile}', encoding='utf-8') as langs_file:
        langs[os.path.splitext(langfile)[0]] = json.load(langs_file)

# IMPORTant data
if platform.system() == 'Windows':
    if config['betamode'] == False:
        with open(os.path.abspath(config['securedir']['Windows']) + '\\' + config['tokenFileName'], encoding='utf-8') as token_file:
            token = token_file.read()
    else:
        with open(os.path.abspath(config['securedir']['Windows']) + '\\' + config['betatokenFileName'], encoding='utf-8') as token_file:
            token = token_file.read()
    with open(os.path.abspath(config['securedir']['Windows']) + '\\' + config['dbacName'], encoding='utf-8') as dbac_file:
        dbac = json.load(dbac_file)
    with open(os.path.abspath(config['securedir']['Windows']) + '\\' + config['sshFileName'], encoding='utf-8') as ssh_file:
        ssh = json.load(ssh_file)
    with open(os.path.abspath(config['securedir']['Windows']) + '\\' + config['openapiFileName'], encoding='utf-8') as openapi_file:
        openapi = json.load(openapi_file)
elif platform.system() == 'Linux':
    if config['is_android']:
        if config['betamode'] == False:
            with open(os.path.abspath(config['securedir']['Android']) + '/' + config['tokenFileName'], encoding='utf-8') as token_file:
                token = token_file.read()
        else:
            with open(os.path.abspath(config['securedir']['Android']) + '/' + config['betatokenFileName'], encoding='utf-8') as token_file:
                token = token_file.read()
        with open(os.path.abspath(config['securedir']['Android']) + '/' + config['dbacName'], encoding='utf-8') as dbac_file:
            dbac = json.load(dbac_file)
        with open(os.path.abspath(config['securedir']['Android']) + '/' + config['sshFileName'], encoding='utf-8') as ssh_file:
            ssh = json.load(ssh_file)
        with open(os.path.abspath(config['securedir']['Android']) + '/' + config['openapiFileName'], encoding='utf-8') as openapi_file:
            openapi = json.load(openapi_file)
    else:
        if config['betamode'] == False:
            with open(os.path.abspath(config['securedir']['Linux']) + '/' + config['tokenFileName'], encoding='utf-8') as token_file:
                token = token_file.read()
        else:
            with open(os.path.abspath(config['securedir']['Linux']) + '/' + config['betatokenFileName'], encoding='utf-8') as token_file:
                token = token_file.read()
        with open(os.path.abspath(config['securedir']['Linux']) + '/' + config['dbacName'], encoding='utf-8') as dbac_file:
            dbac = json.load(dbac_file)
        with open(os.path.abspath(config['securedir']['Linux']) + '/' + config['sshFileName'], encoding='utf-8') as ssh_file:
            ssh = json.load(ssh_file)
        with open(os.path.abspath(config['securedir']['Linux']) + '/' + config['openapiFileName'], encoding='utf-8') as openapi_file:
            openapi = json.load(openapi_file)

prefix = config['prefix']
if config['betamode']:
    prefix = config['betaprefix']
activity = config['activity']
status = config['defaultStatus']
boticon = config['botIconUrl']
thumbnail = config['thumbnailUrl']
imshost = config['ims_host']
for i in color.keys(): # convert HEX to DEC
    color[i] = int(color[i], 16)

# SSH Connect
sshclient = paramiko.SSHClient()
sshclient.set_missing_host_key_policy(paramiko.AutoAddPolicy)
sshclient.connect(ssh['host'], username=ssh['user'], password=ssh['password'], port=ssh['port'])

async def dbcmd(cmd):
    stdin, stdout, stderr = await client.loop.run_in_executor(None, sshclient.exec_command, cmd)
    lines = stdout.readlines()
    return ''.join(lines)

# DB Connect
dbkey = 'default'
if config['betamode']:
    dbkey = 'beta'

db = pymysql.connect(
    host=dbac[dbkey]['host'],
    user=dbac[dbkey]['dbUser'],
    password=dbac[dbkey]['dbPassword'],
    db=dbac[dbkey]['dbName'],
    charset='utf8',
    autocommit=True
)
cur = db.cursor(pymysql.cursors.DictCursor)

logger.info('ÌôïÏû• Î∞è Î™ÖÎ†πÏùÑ Î°úÎìúÌï©ÎãàÎã§.')

# Start Bot
client = Salmon(command_prefix=prefix, error=errors, status=discord.Status.dnd, activity=discord.Game('Ïó∞Ïñ¥Î¥á ÏãúÏûë'))
client.remove_command('help')
msglog = msglogger.Msglog(logger)

check = checks.Checks(cur=cur, error=errors)
emj = emojictrl.Emoji(client, emojis['emoji-server'], emojis['emojis'])
gamenum = 0

# Event Functions

@client.event
async def on_ready():
    logger.info(f'Î°úÍ∑∏Ïù∏: {client.user.id}')
    logger.info('Î∞±Í∑∏ÎùºÏö¥Îìú Î£®ÌîÑÎ•º ÏãúÏûëÌï©ÎãàÎã§.')
    await client.change_presence(status=discord.Status.online)
    presence_loop.start()
    pingloop.start()
    dbloop.start()
    if config['betamode']:  
        logger.warning('BETA MODE ENABLED')
        # pulse.send_pulse.start(client=client, user='salmonbot-beta', token=token.strip(), host='arpa.kro.kr', version=version['versionPrefix'] + version['versionNum'])
    else:
        pass
        # pulse.send_pulse.start(client=client, user='salmonbot', token=token.strip(), host='arpa.kro.kr', version=version['versionPrefix'] + version['versionNum'])

@tasks.loop(seconds=5) #Ïù¥ ÏΩîÎìúÎäî Ìä∏ÌéôÏùò Í≤É(?)
async def pingloop():
    try:
        ping = round(client.latency*1000,2)
        if ping <= 100: pinglevel = 'üîµ Îß§Ïö∞Ï¢ãÏùå'
        elif ping <= 250: pinglevel = 'üü¢ ÏñëÌò∏Ìï®'
        elif ping <= 400: pinglevel = 'üü° Î≥¥ÌÜµ'
        elif ping <= 550: pinglevel = 'üî¥ ÎÇòÏÅ®'
        else: pinglevel = '‚ö™ Îß§Ïö∞ÎÇòÏÅ®'
        client.set_data('ping', (ping, pinglevel))
        pinglogger.info(f'{ping}ms')
        pinglogger.info(f'DB_OPEN: {db.open}')
        pinglogger.info(f'CLIENT_CONNECTED: {not client.is_closed()}')
        guildshards = {}
        for one in client.latencies:
            guildshards[one[0]] = tuple(filter(lambda guild: guild.shard_id == one[0], client.guilds))
        client.set_data('guildshards', guildshards)
        client.get_data('guildshards')
    except:
        errlogger.error(traceback.format_exc())

@tasks.loop(seconds=5)
async def dbloop():
    global cur
    try:
        db.ping(reconnect=False)
    except:
        errlogger.warning('DB CONNECTION CLOSED. RECONNECTING...')
        db.ping(reconnect=True)
        errlogger.info('DB RECONNECT DONE.')

@tasks.loop(seconds=7)
async def presence_loop():
    global gamenum
    try:
        games = [f'Ïó∞Ïñ¥Î¥á - {prefix}ÎèÑÏõÄ ÏûÖÎ†•!', f'{len(client.guilds)}Í∞úÏùò ÏÑúÎ≤ÑÏôÄ Ìï®Íªò', f'{len(client.users)}Î™ÖÏùò ÏÇ¨Ïö©ÏûêÏôÄ Ìï®Íªò']
        await client.change_presence(activity=discord.Game(games[gamenum]))
        if gamenum == len(games)-1:
            gamenum = 0
        else:
            gamenum += 1
    except:
        errlogger.error(traceback.format_exc())

@client.event
async def on_error(event, *args, **kwargs):
    ignoreexc = [discord.http.NotFound]
    excinfo = sys.exc_info()
    errstr = f'{"".join(traceback.format_tb(excinfo[2]))}{excinfo[0].__name__}: {excinfo[1]}'
    errlogger.error('\n========== sERROR ==========\n' + errstr + '\n========== sERREND ==========')

@client.event
async def on_command_error(ctx: commands.Context, error: Exception):
    allerrs = (type(error), type(error.__cause__))
    tb = traceback.format_exception(type(error), error, error.__traceback__)
    err = []
    for line in tb:
        err.append(line.rstrip())
    errstr = '\n'.join(err)
    if hasattr(ctx.command, 'on_error'):
        return
    elif commands.errors.MissingRequiredArgument in allerrs:
        return
    elif isinstance(error, errors.NotRegistered):
        await ctx.send(f'Îì±Î°ùÎêòÏßÄ ÏïäÏùÄ ÏÇ¨Ïö©ÏûêÏûÖÎãàÎã§! `{prefix}Îì±Î°ù` Î™ÖÎ†πÏúºÎ°ú Îì±Î°ùÌï¥Ï£ºÏÑ∏Ïöî!')
        msglog.log(ctx, '[ÎØ∏Îì±Î°ù ÏÇ¨Ïö©Ïûê]')
        return
    elif isinstance(error, errors.NotMaster):
        return
    elif errors.ParamsNotExist in allerrs:
        embed = discord.Embed(title=f'‚ùì Ï°¥Ïû¨ÌïòÏßÄ ÏïäÎäî Î™ÖÎ†π ÏòµÏÖòÏûÖÎãàÎã§: {", ".join(str(error.__cause__.param))}', description=f'`{prefix}ÎèÑÏõÄ` Î™ÖÎ†πÏúºÎ°ú Ï†ÑÏ≤¥ Î™ÖÎ†πÏñ¥Î•º ÌôïÏù∏Ìï† Ïàò ÏûàÏñ¥Ïöî.', color=color['error'], timestamp=datetime.datetime.utcnow())
        await ctx.send(embed=embed)
        msglog.log(ctx, '[Ï°¥Ïû¨ÌïòÏßÄ ÏïäÎäî Î™ÖÎ†π ÏòµÏÖò]')
        return
    elif isinstance(error, commands.errors.CommandNotFound):
        embed = discord.Embed(title='‚ùì Ï°¥Ïû¨ÌïòÏßÄ ÏïäÎäî Î™ÖÎ†πÏñ¥ÏûÖÎãàÎã§!', description=f'`{prefix}ÎèÑÏõÄ` Î™ÖÎ†πÏúºÎ°ú Ï†ÑÏ≤¥ Î™ÖÎ†πÏñ¥Î•º ÌôïÏù∏Ìï† Ïàò ÏûàÏñ¥Ïöî.', color=color['error'], timestamp=datetime.datetime.utcnow())
        await ctx.send(embed=embed)
        msglog.log(ctx, '[Ï°¥Ïû¨ÌïòÏßÄ ÏïäÎäî Î™ÖÎ†π]')
        return
    elif isinstance(error, errors.SentByBotUser):
        return
    elif isinstance(error, commands.errors.NoPrivateMessage):
        embed = discord.Embed(title='‚õî Í∏∏Îìú Ï†ÑÏö© Î™ÖÎ†πÏñ¥', description='Ïù¥ Î™ÖÎ†πÏñ¥Îäî Í∏∏Îìú Ï±ÑÎÑêÏóêÏÑúÎßå ÏÇ¨Ïö©Ìï† Ïàò ÏûàÏäµÎãàÎã§!', color=color['error'], timestamp=datetime.datetime.utcnow())
        await ctx.send(embed=embed)
        msglog.log(ctx, '[Í∏∏Îìú Ï†ÑÏö© Î™ÖÎ†π]')
        return
    elif isinstance(error, (commands.errors.CheckFailure, commands.errors.MissingPermissions)):
        perms = [permutil.format_perm_by_name(perm) for perm in error.missing_perms]
        embed = discord.Embed(title='‚õî Î©§Î≤Ñ Í∂åÌïú Î∂ÄÏ°±!', description=f'{ctx.author.mention}, Ïù¥ Î™ÖÎ†πÏñ¥Î•º ÏÇ¨Ïö©ÌïòÎ†§Î©¥ Îã§ÏùåÍ≥º Í∞ôÏùÄ Í∏∏Îìú Í∂åÌïúÏù¥ ÌïÑÏöîÌï©ÎãàÎã§!\n`' + '`, `'.join(perms) + '`', color=color['error'], timestamp=datetime.datetime.utcnow())
        await ctx.send(embed=embed)
        msglog.log(ctx, '[Î©§Î≤Ñ Í∂åÌïú Î∂ÄÏ°±]')
        return
    elif isinstance(error.__cause__, discord.HTTPException):
        if error.__cause__.code == 50013:
            missings = permutil.find_missing_perms_by_tbstr(errstr)
            fmtperms = [permutil.format_perm_by_name(perm) for perm in missings]
            embed = discord.Embed(title='‚õî Î¥á Í∂åÌïú Î∂ÄÏ°±!', description='Ïù¥ Î™ÖÎ†πÏñ¥Î•º ÏÇ¨Ïö©ÌïòÎäî Îç∞ ÌïÑÏöîÌïú Î¥áÏùò Í∂åÌïúÏù¥ Î∂ÄÏ°±Ìï©ÎãàÎã§!\n`' + '`, `'.join(fmtperms) + '`', color=color['error'], timestamp=datetime.datetime.utcnow())
            await ctx.send(embed=embed)
            msglog.log(ctx, '[Î¥á Í∂åÌïú Î∂ÄÏ°±]')
            print(errstr)
            return
        elif error.__cause__.code == 50035:
            embed = discord.Embed(title='‚ùó Î©îÏãúÏßÄ Ï†ÑÏÜ° Ïã§Ìå®', description='Î≥¥ÎÇ¥Î†§Í≥† ÌïòÎäî Î©îÏãúÏßÄÍ∞Ä ÎÑàÎ¨¥ Í∏∏Ïñ¥ Ï†ÑÏÜ°Ïóê Ïã§Ìå®ÌñàÏäµÎãàÎã§.', color=color['error'], timestamp=datetime.datetime.utcnow())
            await ctx.send(embed=embed)
            msglog.log(ctx, '[ÎÑàÎ¨¥ Í∏¥ Î©îÏãúÏßÄ Ï†ÑÏÜ° ÏãúÎèÑ]')
            return
        else:
            await ctx.send('Ïò§Î•ò ÏΩîÎìú: ' + str(error.__cause__.code))
    
    errlogger.error('\n========== CMDERROR ==========\n' + errstr + '\n========== CMDERREND ==========')
    embed = discord.Embed(title='‚ùå Ïò§Î•ò!', description=f'Î¨¥Ïñ∏Í∞Ä Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§!\n```python\n{errstr}```\nÏò§Î•òÍ∞Ä Í∏∞Î°ùÎêòÏóàÏäµÎãàÎã§. ÎÇòÏ§ëÏóê Í∞úÎ∞úÏûêÍ∞Ä ÌôïÏù∏ÌïòÍ≥† Ï≤òÎ¶¨ÌïòÍ≤å Îê©ÎãàÎã§.', color=color['error'], timestamp=datetime.datetime.utcnow())
    await ctx.send(embed=embed)
    msglog.log(ctx, '[Ïª§Îß®Îìú Ïò§Î•ò]')

logger.info('Î¥á ÏãúÏûë Ï§ÄÎπÑ ÏôÑÎ£å.')

client.add_check(check.notbot)

client.add_data('config', config)
client.add_data('color', color)
client.add_data('openapi', openapi)
client.add_data('emojictrl', emj)
client.add_data('check', check)
client.add_data('msglog', msglog)
client.add_data('errlogger', errlogger)
client.add_data('logger', logger)
client.add_data('errors', errors)
client.add_data('cur', cur)
client.add_data('dbcmd', dbcmd)
client.add_data('ping', None)
client.add_data('guildshards', None)
client.add_data('version_str', version['versionPrefix'] + version['versionNum'])
client.add_data('lockedexts', ['exts.basecmds', 'exts.event'])
client.add_data('start', datetime.datetime.now())

client.datas['allexts'] = []
for ext in list(filter(lambda x: x.endswith('.py'), os.listdir('./exts'))):
    client.datas['allexts'].append('exts.' + os.path.splitext(ext)[0])
    client.load_extension('exts.' + os.path.splitext(ext)[0])

client.run(token)
